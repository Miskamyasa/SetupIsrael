---
import { Icon } from "astro-icon";

import Button from "../buttons/Button";
import CTA from "../CTA/CTA.astro";

export interface Props {
  title: string
  description: string
  descriptionList: {
    title: string,
    description: string,
  }[]
}

const { title, description, descriptionList }: Props = Astro.props;
---

<section class="container">
  <CTA
    description={description}
    title={title} />
  <div class="description-list">
    <dl>
      {descriptionList.map(term => (
        <>
          <dt
            data-term
            class="term">
            <Icon
              class="title-icon icon-collapsed"
              name="chevron-right"
              pack="gridicons" />
            <Icon
              class="title-icon icon-expanded"
              name="chevron-down"
              pack="gridicons" />
            {term.title}
          </dt>
          <dd>{term.description}</dd>
        </>
      ))}
    </dl>
  </div>
  <Button>Send message</Button>
</section>

<style>
  dd {
    display: none;
    font-size: 16px;
  }

  dt {
    font-size: 25px;
    font-weight: 500;
    cursor: pointer;
    display: flex;
    align-items: center;
    margin: 1rem 0;
  }

  .description-list {
    margin: 1rem 0;
  }

  .title-icon {
    margin-right: 10px;
    width: 1rem;
    height: 1rem;
  }

  .icon-expanded {
    display: none;
  }

  dt.expanded .icon-collapsed {
    display: none;
  }

  dt.expanded .icon-expanded {
    display: inline-block;
  }
</style>

<script >
document.querySelectorAll('[data-term]').forEach((term) => {
    term.addEventListener('click', function(event) {
      const clickedTerm = event.currentTarget as HTMLDListElement;
      const definition = clickedTerm.nextElementSibling as HTMLElement;

      if (!definition.style.display || definition.style.display === 'none') {
        document.querySelectorAll('dd').forEach(dd => (dd as HTMLElement).style.display = 'none');
        document.querySelectorAll('dt').forEach(dt => dt.classList.remove('expanded'));
        definition.style.display = 'block';
        clickedTerm.classList.add('expanded');
      } else {
        definition.style.display = 'none';
        clickedTerm.classList.remove('expanded');
      }
    });
});

</script>
